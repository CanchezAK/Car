
CarControl_Check_Gluck.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000769  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000685  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b5  00000000  00000000  00001a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  9e:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer_init>:
unsigned char first_time = 1;

void timer_init()
{
	
	TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);		//Divider 1024, Clear To Compare mode with OCR1A
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8d 60       	ori	r24, 0x0D	; 13
  ae:	80 83       	st	Z, r24
	OCR1A = 1562;
  b0:	8a e1       	ldi	r24, 0x1A	; 26
  b2:	96 e0       	ldi	r25, 0x06	; 6
  b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1<<OCIE1A);		//Output Compare A Match Interrupt Enable
  bc:	ef e6       	ldi	r30, 0x6F	; 111
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{	
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	if (CHECK_HAND1)
  e2:	4b 99       	sbic	0x09, 3	; 9
  e4:	65 c0       	rjmp	.+202    	; 0x1b0 <__vector_11+0xe8>
  e6:	6d c0       	rjmp	.+218    	; 0x1c2 <__vector_11+0xfa>
	{
		while(CHECK_HAND1)
		{
			tim++;
  e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tim>
  ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tim+0x1>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tim+0x1>
  f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tim>
			if (tim >= 300)
  fa:	8c 32       	cpi	r24, 0x2C	; 44
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	92 07       	cpc	r25, r18
 100:	08 f4       	brcc	.+2      	; 0x104 <__vector_11+0x3c>
 102:	56 c0       	rjmp	.+172    	; 0x1b0 <__vector_11+0xe8>
			{
				if (first_time == 1) 
 104:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	69 f4       	brne	.+26     	; 0x126 <__vector_11+0x5e>
				{
					ControlRelayActive;
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	8b b9       	out	0x0b, r24	; 11
					while (CHECK_POS0);
 112:	4c 9b       	sbis	0x09, 4	; 9
 114:	fe cf       	rjmp	.-4      	; 0x112 <__vector_11+0x4a>
					while (CHECK_POS1);
 116:	4c 99       	sbic	0x09, 4	; 9
 118:	fe cf       	rjmp	.-4      	; 0x116 <__vector_11+0x4e>
					ControlRelayInactive;
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8f 7b       	andi	r24, 0xBF	; 191
 11e:	8b b9       	out	0x0b, r24	; 11
					first_time = 0;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	26 c0       	rjmp	.+76     	; 0x172 <__vector_11+0xaa>
				}
				else if (first_time == 0 && ((tim-300)%50000) == 0)
 126:	21 11       	cpse	r18, r1
 128:	24 c0       	rjmp	.+72     	; 0x172 <__vector_11+0xaa>
 12a:	8c 52       	subi	r24, 0x2C	; 44
 12c:	91 40       	sbci	r25, 0x01	; 1
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	80 35       	cpi	r24, 0x50	; 80
 134:	43 ec       	ldi	r20, 0xC3	; 195
 136:	94 07       	cpc	r25, r20
 138:	10 f4       	brcc	.+4      	; 0x13e <__vector_11+0x76>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	60 e5       	ldi	r22, 0x50	; 80
 140:	73 ec       	ldi	r23, 0xC3	; 195
 142:	26 9f       	mul	r18, r22
 144:	a0 01       	movw	r20, r0
 146:	27 9f       	mul	r18, r23
 148:	50 0d       	add	r21, r0
 14a:	36 9f       	mul	r19, r22
 14c:	50 0d       	add	r21, r0
 14e:	11 24       	eor	r1, r1
 150:	84 17       	cp	r24, r20
 152:	95 07       	cpc	r25, r21
 154:	71 f4       	brne	.+28     	; 0x172 <__vector_11+0xaa>
				{
					ControlRelayActive;
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	8b b9       	out	0x0b, r24	; 11
					while (CHECK_POS0);
 15c:	4c 9b       	sbis	0x09, 4	; 9
 15e:	fe cf       	rjmp	.-4      	; 0x15c <__vector_11+0x94>
					while (CHECK_POS1);
 160:	4c 99       	sbic	0x09, 4	; 9
 162:	fe cf       	rjmp	.-4      	; 0x160 <__vector_11+0x98>
					ControlRelayInactive;
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	8b b9       	out	0x0b, r24	; 11
					tim = 0;
 16a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tim+0x1>
 16e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tim>
				}
				//_delay_ms(5000);
				
				if (CHECK_WASH1)
 172:	4d 9b       	sbis	0x09, 5	; 9
 174:	1d c0       	rjmp	.+58     	; 0x1b0 <__vector_11+0xe8>
 176:	16 c0       	rjmp	.+44     	; 0x1a4 <__vector_11+0xdc>
				{
					while (CHECK_WASH1)
					{
						tim_wash++;
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tim_wash>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tim_wash+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tim_wash+0x1>
 186:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tim_wash>
						if (tim_wash >= 300)
 18a:	8c 32       	cpi	r24, 0x2C	; 44
 18c:	91 40       	sbci	r25, 0x01	; 1
 18e:	50 f0       	brcs	.+20     	; 0x1a4 <__vector_11+0xdc>
						{
							ControlRelayActive;
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	80 64       	ori	r24, 0x40	; 64
 194:	8b b9       	out	0x0b, r24	; 11
							while (CHECK_POS0);
 196:	4c 9b       	sbis	0x09, 4	; 9
 198:	fe cf       	rjmp	.-4      	; 0x196 <__vector_11+0xce>
							while (CHECK_POS1);
 19a:	4c 99       	sbic	0x09, 4	; 9
 19c:	fe cf       	rjmp	.-4      	; 0x19a <__vector_11+0xd2>
							ControlRelayInactive;
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	8b b9       	out	0x0b, r24	; 11
				}
				//_delay_ms(5000);
				
				if (CHECK_WASH1)
				{
					while (CHECK_WASH1)
 1a4:	4d 99       	sbic	0x09, 5	; 9
 1a6:	e8 cf       	rjmp	.-48     	; 0x178 <__vector_11+0xb0>
							while (CHECK_POS0);
							while (CHECK_POS1);
							ControlRelayInactive;
						}
					}
					tim_wash = 0;
 1a8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tim_wash+0x1>
 1ac:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tim_wash>

ISR (TIMER1_COMPA_vect)
{	
	if (CHECK_HAND1)
	{
		while(CHECK_HAND1)
 1b0:	4b 99       	sbic	0x09, 3	; 9
 1b2:	9a cf       	rjmp	.-204    	; 0xe8 <__vector_11+0x20>
					}
					tim_wash = 0;
				}
			}
		}
		tim = 0;
 1b4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tim+0x1>
 1b8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tim>
		first_time = 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (CHECK_WASH1)
 1c2:	4d 99       	sbic	0x09, 5	; 9
 1c4:	1d c0       	rjmp	.+58     	; 0x200 <__vector_11+0x138>
 1c6:	1e c0       	rjmp	.+60     	; 0x204 <__vector_11+0x13c>
	{
		while (CHECK_WASH1)
		{
			tim_wash++;
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tim_wash>
 1cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tim_wash+0x1>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tim_wash+0x1>
 1d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tim_wash>
			if (tim_wash >= 300)
 1da:	8c 32       	cpi	r24, 0x2C	; 44
 1dc:	91 40       	sbci	r25, 0x01	; 1
 1de:	80 f0       	brcs	.+32     	; 0x200 <__vector_11+0x138>
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <__vector_11+0x132>
			{
				for (uint8_t count = 0; count <= 2; count++)
				{
					ControlRelayActive;
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	8b b9       	out	0x0b, r24	; 11
					while (CHECK_POS0);
 1e8:	4c 9b       	sbis	0x09, 4	; 9
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <__vector_11+0x120>
					while (CHECK_POS1);
 1ec:	4c 99       	sbic	0x09, 4	; 9
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <__vector_11+0x124>
					ControlRelayInactive;
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8f 7b       	andi	r24, 0xBF	; 191
 1f4:	8b b9       	out	0x0b, r24	; 11
		while (CHECK_WASH1)
		{
			tim_wash++;
			if (tim_wash >= 300)
			{
				for (uint8_t count = 0; count <= 2; count++)
 1f6:	9f 5f       	subi	r25, 0xFF	; 255
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <__vector_11+0x134>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	93 30       	cpi	r25, 0x03	; 3
 1fe:	88 f3       	brcs	.-30     	; 0x1e2 <__vector_11+0x11a>
		tim = 0;
		first_time = 1;
	}
	if (CHECK_WASH1)
	{
		while (CHECK_WASH1)
 200:	4d 99       	sbic	0x09, 5	; 9
 202:	e2 cf       	rjmp	.-60     	; 0x1c8 <__vector_11+0x100>
				}
			}
		}
		tim_wash = 0;
	}
	tim = 0;		//Delete counters
 204:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tim+0x1>
 208:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tim>
	tim_wash = 0;
 20c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tim_wash+0x1>
 210:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tim_wash>
}
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <ADC_init>:

void ADC_init()
{
	ADMUX |= (1<<REFS0) | (0<<ADLAR);
 22e:	ec e7       	ldi	r30, 0x7C	; 124
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 238:	ea e7       	ldi	r30, 0x7A	; 122
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	87 68       	ori	r24, 0x87	; 135
 240:	80 83       	st	Z, r24
 242:	08 95       	ret

00000244 <ADC_ReadData>:
	//Read data from ADCL & ADCH (I use ADCH only)
}

unsigned short ADC_ReadData()
{
	ADCSRA |= (1<<ADSC);
 244:	ea e7       	ldi	r30, 0x7A	; 122
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC)));
 24e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 252:	86 fd       	sbrc	r24, 6
 254:	fc cf       	rjmp	.-8      	; 0x24e <ADC_ReadData+0xa>
	ADCSRA &= ~(1<<ADSC);
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	8f 7b       	andi	r24, 0xBF	; 191
 25e:	80 83       	st	Z, r24
	return ADC;
 260:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 264:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 268:	08 95       	ret

0000026a <main>:

int main(void)
{
	DDRD = 0x00;		//Clear PORTD parameters
 26a:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<6) | (1<<7);		//PD6 & PD7 output
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 6c       	ori	r24, 0xC0	; 192
 270:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		//Pull-Up to inputs
 272:	1b b8       	out	0x0b, r1	; 11
	PORTD &= ~(1<<6) & ~(1<<7);		//Low level to output PD6 & PD7
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	8f 73       	andi	r24, 0x3F	; 63
 278:	8b b9       	out	0x0b, r24	; 11
	if(CHECK_POS1)
 27a:	4c 99       	sbic	0x09, 4	; 9
 27c:	04 c0       	rjmp	.+8      	; 0x286 <main+0x1c>
 27e:	08 c0       	rjmp	.+16     	; 0x290 <main+0x26>
	{
		while (CHECK_POS1)
		{
			ControlRelayActive;
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	80 64       	ori	r24, 0x40	; 64
 284:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<6) | (1<<7);		//PD6 & PD7 output
	PORTD = 0x00;		//Pull-Up to inputs
	PORTD &= ~(1<<6) & ~(1<<7);		//Low level to output PD6 & PD7
	if(CHECK_POS1)
	{
		while (CHECK_POS1)
 286:	4c 99       	sbic	0x09, 4	; 9
 288:	fb cf       	rjmp	.-10     	; 0x280 <main+0x16>
		{
			ControlRelayActive;
		}
		ControlRelayInactive;
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	8f 7b       	andi	r24, 0xBF	; 191
 28e:	8b b9       	out	0x0b, r24	; 11
	}
	ADC_init();
 290:	0e 94 17 01 	call	0x22e	; 0x22e <ADC_init>
	cli();
 294:	f8 94       	cli
    timer_init();
 296:	0e 94 53 00 	call	0xa6	; 0xa6 <timer_init>
	sei();
 29a:	78 94       	sei
    while (1) 
    {
			adc_data = ADC_ReadData();
 29c:	0e 94 22 01 	call	0x244	; 0x244 <ADC_ReadData>
 2a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			if (adc_data < 557)
 2a8:	8d 32       	cpi	r24, 0x2D	; 45
 2aa:	22 e0       	ldi	r18, 0x02	; 2
 2ac:	92 07       	cpc	r25, r18
 2ae:	20 f4       	brcc	.+8      	; 0x2b8 <main+0x4e>
			{
				PORTD |= (1<<7);
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	f2 cf       	rjmp	.-28     	; 0x29c <main+0x32>
			}
			else if (adc_data > 573)
 2b8:	8e 33       	cpi	r24, 0x3E	; 62
 2ba:	92 40       	sbci	r25, 0x02	; 2
 2bc:	78 f3       	brcs	.-34     	; 0x29c <main+0x32>
			{
				PORTD &= ~(1<<7);
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	8f 77       	andi	r24, 0x7F	; 127
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	eb cf       	rjmp	.-42     	; 0x29c <main+0x32>

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
