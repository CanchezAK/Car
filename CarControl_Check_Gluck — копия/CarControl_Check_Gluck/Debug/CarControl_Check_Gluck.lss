
CarControl_Check_Gluck.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007db  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00000b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040a  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040d  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bc  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  88:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer_init>:
unsigned short adc_data = 0;

void timer_init()
{
	
	TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);		//Divider 1024, Clear To Compare mode with OCR1A
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8d 60       	ori	r24, 0x0D	; 13
  98:	80 83       	st	Z, r24
	OCR1A = 1562;
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	96 e0       	ldi	r25, 0x06	; 6
  9e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1<<OCIE1A);		//Output Compare A Match Interrupt Enable
  a6:	ef e6       	ldi	r30, 0x6F	; 111
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{	
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	if (CHECK_HAND1)
  c2:	4b 99       	sbic	0x09, 3	; 9
  c4:	3f c0       	rjmp	.+126    	; 0x144 <__vector_11+0x92>
  c6:	44 c0       	rjmp	.+136    	; 0x150 <__vector_11+0x9e>
	{
		while(CHECK_HAND1)
		{
			tim++;
  c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tim>
  cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tim+0x1>
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tim+0x1>
  d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tim>
			if (tim >= 300)
  da:	8c 32       	cpi	r24, 0x2C	; 44
  dc:	91 40       	sbci	r25, 0x01	; 1
  de:	90 f1       	brcs	.+100    	; 0x144 <__vector_11+0x92>
			{
				ControlRelayActive;
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8b b9       	out	0x0b, r24	; 11
				while (CHECK_POS0);
  e6:	4c 9b       	sbis	0x09, 4	; 9
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <__vector_11+0x34>
				while (CHECK_POS1);
  ea:	4c 99       	sbic	0x09, 4	; 9
  ec:	fe cf       	rjmp	.-4      	; 0xea <__vector_11+0x38>
				ControlRelayInactive;
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	93 e2       	ldi	r25, 0x23	; 35
  f8:	24 ef       	ldi	r18, 0xF4	; 244
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <__vector_11+0x48>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__vector_11+0x52>
 104:	00 00       	nop
				_delay_ms(5000);
				
				if (CHECK_WASH1)
 106:	4d 9b       	sbis	0x09, 5	; 9
 108:	1d c0       	rjmp	.+58     	; 0x144 <__vector_11+0x92>
 10a:	16 c0       	rjmp	.+44     	; 0x138 <__vector_11+0x86>
				{
					while (CHECK_WASH1)
					{
						tim_wash++;
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tim_wash>
 110:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tim_wash+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tim_wash+0x1>
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tim_wash>
						if (tim_wash >= 300)
 11e:	8c 32       	cpi	r24, 0x2C	; 44
 120:	91 40       	sbci	r25, 0x01	; 1
 122:	50 f0       	brcs	.+20     	; 0x138 <__vector_11+0x86>
						{
							ControlRelayActive;
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8b b9       	out	0x0b, r24	; 11
							while (CHECK_POS0);
 12a:	4c 9b       	sbis	0x09, 4	; 9
 12c:	fe cf       	rjmp	.-4      	; 0x12a <__vector_11+0x78>
							while (CHECK_POS1);
 12e:	4c 99       	sbic	0x09, 4	; 9
 130:	fe cf       	rjmp	.-4      	; 0x12e <__vector_11+0x7c>
							ControlRelayInactive;
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	8f 7b       	andi	r24, 0xBF	; 191
 136:	8b b9       	out	0x0b, r24	; 11
				ControlRelayInactive;
				_delay_ms(5000);
				
				if (CHECK_WASH1)
				{
					while (CHECK_WASH1)
 138:	4d 99       	sbic	0x09, 5	; 9
 13a:	e8 cf       	rjmp	.-48     	; 0x10c <__vector_11+0x5a>
							while (CHECK_POS0);
							while (CHECK_POS1);
							ControlRelayInactive;
						}
					}
					tim_wash = 0;
 13c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tim_wash+0x1>
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tim_wash>

ISR (TIMER1_COMPA_vect)
{	
	if (CHECK_HAND1)
	{
		while(CHECK_HAND1)
 144:	4b 99       	sbic	0x09, 3	; 9
 146:	c0 cf       	rjmp	.-128    	; 0xc8 <__vector_11+0x16>
					}
					tim_wash = 0;
				}
			}
		}
		tim = 0;
 148:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tim+0x1>
 14c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tim>
	}
	if (CHECK_WASH1)
 150:	4d 99       	sbic	0x09, 5	; 9
 152:	1d c0       	rjmp	.+58     	; 0x18e <__vector_11+0xdc>
 154:	1e c0       	rjmp	.+60     	; 0x192 <__vector_11+0xe0>
	{
		while (CHECK_WASH1)
		{
			tim_wash++;
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tim_wash>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tim_wash+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tim_wash+0x1>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tim_wash>
			if (tim_wash >= 300)
 168:	8c 32       	cpi	r24, 0x2C	; 44
 16a:	91 40       	sbci	r25, 0x01	; 1
 16c:	80 f0       	brcs	.+32     	; 0x18e <__vector_11+0xdc>
 16e:	0c c0       	rjmp	.+24     	; 0x188 <__vector_11+0xd6>
			{
				for (uint8_t count = 0; count < 2; count++)
				{
					ControlRelayActive;
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 64       	ori	r24, 0x40	; 64
 174:	8b b9       	out	0x0b, r24	; 11
					while (CHECK_POS0);
 176:	4c 9b       	sbis	0x09, 4	; 9
 178:	fe cf       	rjmp	.-4      	; 0x176 <__vector_11+0xc4>
					while (CHECK_POS1);
 17a:	4c 99       	sbic	0x09, 4	; 9
 17c:	fe cf       	rjmp	.-4      	; 0x17a <__vector_11+0xc8>
					ControlRelayInactive;
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8b b9       	out	0x0b, r24	; 11
		while (CHECK_WASH1)
		{
			tim_wash++;
			if (tim_wash >= 300)
			{
				for (uint8_t count = 0; count < 2; count++)
 184:	9f 5f       	subi	r25, 0xFF	; 255
 186:	01 c0       	rjmp	.+2      	; 0x18a <__vector_11+0xd8>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	92 30       	cpi	r25, 0x02	; 2
 18c:	88 f3       	brcs	.-30     	; 0x170 <__vector_11+0xbe>
		}
		tim = 0;
	}
	if (CHECK_WASH1)
	{
		while (CHECK_WASH1)
 18e:	4d 99       	sbic	0x09, 5	; 9
 190:	e2 cf       	rjmp	.-60     	; 0x156 <__vector_11+0xa4>
				}
			}
		}
		tim_wash = 0;
	}
	tim = 0;		//Delete counters
 192:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tim+0x1>
 196:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tim>
	tim_wash = 0;
 19a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tim_wash+0x1>
 19e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tim_wash>
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <ADC_init>:

void ADC_init()
{
	ADMUX |= (1<<REFS0) | (0<<ADLAR);
 1b2:	ec e7       	ldi	r30, 0x7C	; 124
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 1bc:	ea e7       	ldi	r30, 0x7A	; 122
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	87 68       	ori	r24, 0x87	; 135
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <ADC_ReadData>:
	//Read data from ADCL & ADCH (I use ADCH only)
}

unsigned short ADC_ReadData()
{
	ADCSRA |= (1<<ADSC);
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC)));
 1d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1d6:	86 fd       	sbrc	r24, 6
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <ADC_ReadData+0xa>
	ADCSRA &= ~(1<<ADSC);
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8f 7b       	andi	r24, 0xBF	; 191
 1e2:	80 83       	st	Z, r24
	return ADC;
 1e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1ec:	08 95       	ret

000001ee <main>:

int main(void)
{
	DDRD = 0x00;		//Clear PORTD parameters
 1ee:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<6) | (1<<7);		//PD6 & PD7 output
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	80 6c       	ori	r24, 0xC0	; 192
 1f4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		//Pull-Up to inputs
 1f6:	1b b8       	out	0x0b, r1	; 11
	PORTD &= ~(1<<6) & ~(1<<7);		//Low level to output PD6 & PD7
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 73       	andi	r24, 0x3F	; 63
 1fc:	8b b9       	out	0x0b, r24	; 11
	if(CHECK_POS1)
 1fe:	4c 99       	sbic	0x09, 4	; 9
 200:	04 c0       	rjmp	.+8      	; 0x20a <main+0x1c>
 202:	08 c0       	rjmp	.+16     	; 0x214 <main+0x26>
	{
		while (CHECK_POS1)
		{
			ControlRelayActive;
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	80 64       	ori	r24, 0x40	; 64
 208:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<6) | (1<<7);		//PD6 & PD7 output
	PORTD = 0x00;		//Pull-Up to inputs
	PORTD &= ~(1<<6) & ~(1<<7);		//Low level to output PD6 & PD7
	if(CHECK_POS1)
	{
		while (CHECK_POS1)
 20a:	4c 99       	sbic	0x09, 4	; 9
 20c:	fb cf       	rjmp	.-10     	; 0x204 <main+0x16>
		{
			ControlRelayActive;
		}
		ControlRelayInactive;
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	8f 7b       	andi	r24, 0xBF	; 191
 212:	8b b9       	out	0x0b, r24	; 11
	}
	ADC_init();
 214:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_init>
	cli();
 218:	f8 94       	cli
    timer_init();
 21a:	0e 94 48 00 	call	0x90	; 0x90 <timer_init>
	sei();
 21e:	78 94       	sei
    while (1) 
    {
			adc_data = ADC_ReadData();
 220:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ADC_ReadData>
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			if (adc_data < 557)
 22c:	8d 32       	cpi	r24, 0x2D	; 45
 22e:	22 e0       	ldi	r18, 0x02	; 2
 230:	92 07       	cpc	r25, r18
 232:	20 f4       	brcc	.+8      	; 0x23c <main+0x4e>
			{
				PORTD |= (1<<7);
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	80 68       	ori	r24, 0x80	; 128
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	f2 cf       	rjmp	.-28     	; 0x220 <main+0x32>
			}
			else if (adc_data > 573)
 23c:	8e 33       	cpi	r24, 0x3E	; 62
 23e:	92 40       	sbci	r25, 0x02	; 2
 240:	78 f3       	brcs	.-34     	; 0x220 <main+0x32>
			{
				PORTD &= ~(1<<7);
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8f 77       	andi	r24, 0x7F	; 127
 246:	8b b9       	out	0x0b, r24	; 11
 248:	eb cf       	rjmp	.-42     	; 0x220 <main+0x32>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
